From a04ad66604c8a9cc6e47709681ad0d86ff49f6f4 Mon Sep 17 00:00:00 2001
From: Naveen S <quic_naves@quicinc.com>
Date: Tue, 4 Jun 2024 09:22:50 +0530
Subject: [PATCH] sigma-dut: [WAR] support FT roaming for Multi-link Operation

Extending FT roaming support for MLO with SAE encryption.

Change added to use shorter 48 octet nas_identifier for WPA3 program
which is a requirement for Fast BSS transition.

This change adds config support for adding key holders for different
links of source and target, and also adds neccessary additional
roaming configs.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Signed-off-by: Naveen S <quic_naves@quicinc.com>
---
 ap.c | 93 ++++++++++++++++++++++++++++++++++++++++--------------------
 1 file changed, 63 insertions(+), 30 deletions(-)

diff --git a/ap.c b/ap.c
index 71a6578..08a9382 100644
--- a/ap.c
+++ b/ap.c
@@ -9456,6 +9456,7 @@ enum sigma_cmd_result cmd_ap_config_commit(struct sigma_dut *dut,
 	char ifname2[50];
 	bool mld_sae_set = false;
 	int chwidth_temp;
+	int j;
 
 	drv = get_driver_type(dut);
 	mode = dut->ap_mode;
@@ -10151,7 +10152,7 @@ skip_key_mgmt:
 
 	if (ap_ft_enabled(dut)) {
 		unsigned char own_addr[ETH_ALEN], ap2_addr[ETH_ALEN];
-		char own_addr_str[20], ap2_addr_str[20];
+		char own_addr_str[20];
 
 		fprintf(f, "mobility_domain=%s\n",
 			atoi(dut->ap_mobility_domain) ? dut->ap_mobility_domain : "0101");
@@ -10160,13 +10161,21 @@ skip_key_mgmt:
 			memset(own_addr, 0, ETH_ALEN);
 			own_addr[0] = 0x02;
 		}
+		/*
+		 * main_bssid is set in ap_config_commit based on the conf_counter to keep
+		 * own_addr in line with main_bssid it is also modified similiarly.
+		 */
+		if (conf_counter > 0 && strncmp(dut->device_driver, "ath12k", 6) == 0) {
+			own_addr[4] += conf_counter;
+			own_addr[5] += conf_counter;
+		}
 
 		snprintf(own_addr_str, sizeof(own_addr_str),
 			 "%02x%02x%02x%02x%02x%02x",
 			 own_addr[0], own_addr[1], own_addr[2],
 			 own_addr[3], own_addr[4], own_addr[5]);
 
-		if (dut->program == PROGRAM_MBO)
+		if (dut->program == PROGRAM_MBO || dut->program == PROGRAM_WPA3)
 			fprintf(f,
 				"nas_identifier=%s\n", own_addr_str);
 		else
@@ -10175,38 +10184,62 @@ skip_key_mgmt:
 				own_addr_str);
 
 		fprintf(f, "r1_key_holder=%s\n", own_addr_str);
-		memcpy(ap2_addr, dut->ft_bss_mac_list[0], ETH_ALEN);
-		snprintf(ap2_addr_str, sizeof(ap2_addr_str),
-			 "%02x%02x%02x%02x%02x%02x",
-			 ap2_addr[0], ap2_addr[1], ap2_addr[2],
-			 ap2_addr[3], ap2_addr[4], ap2_addr[5]);
 
 		if (dut->ap_key_mgmt == AP_WPA2_FT_PSK)
 			fprintf(f, "ft_psk_generate_local=1\n");
 
-		fprintf(f, "pmk_r1_push=0\n");
-		if (dut->program == PROGRAM_MBO) {
-			fprintf(f,
-				"r0kh=%02x:%02x:%02x:%02x:%02x:%02x %s 000102030405060708090a0b0c0d0e0f\n",
-				own_addr[0], own_addr[1], own_addr[2],
-				own_addr[3], own_addr[4], own_addr[5],
-				own_addr_str);
-			fprintf(f,
-				"r0kh=%02x:%02x:%02x:%02x:%02x:%02x %s 000102030405060708090a0b0c0d0e0f\n",
-				ap2_addr[0], ap2_addr[1], ap2_addr[2],
-				ap2_addr[3], ap2_addr[4], ap2_addr[5],
-				ap2_addr_str);
-			fprintf(f,
-				"r1kh=%02x:%02x:%02x:%02x:%02x:%02x %02x:%02x:%02x:%02x:%02x:%02x 000102030405060708090a0b0c0d0e0f\n",
-				ap2_addr[0], ap2_addr[1], ap2_addr[2],
-				ap2_addr[3], ap2_addr[4], ap2_addr[5],
-				ap2_addr[0], ap2_addr[1], ap2_addr[2],
-				ap2_addr[3], ap2_addr[4], ap2_addr[5]);
-		} else {
-			fprintf(f,
-				"r0kh=ff:ff:ff:ff:ff:ff * 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
-			fprintf(f,
-				"r1kh=00:00:00:00:00:00 00:00:00:00:00:00 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+		/* pmk_r1_push needs to be enabled for FT over DS */
+		fprintf(f, "pmk_r1_push=%d\n", (dut->ap_ft_ds == VALUE_ENABLED) ? 1 : 0);
+
+		/* These are the default configuration for FT OA and FT DS*/
+		fprintf(f, "ft_r0_key_lifetime=1209600\n");
+		fprintf(f, "r1_max_key_lifetime=-1\n");
+		fprintf(f, "reassociation_deadline=1000\n");
+
+		fprintf(f,
+			"r0kh=%02x:%02x:%02x:%02x:%02x:%02x %s 000102030405060708090a0b0c0d0e0f\n",
+			own_addr[0], own_addr[1], own_addr[2],
+			own_addr[3], own_addr[4], own_addr[5],
+			own_addr_str);
+		/* TODO: Need to update the mac address calculation for partner link */
+		fprintf(f,
+			"r1kh=%02x:%02x:%02x:%02x:%02x:%02x %02x:%02x:%02x:%02x:%02x:%02x 000102030405060708090a0b0c0d0e0f\n",
+			own_addr[0], own_addr[1], own_addr[2],
+			own_addr[3], (conf_counter == 0) ? own_addr[4] + 1 : own_addr[4] - conf_counter,
+			(conf_counter == 0) ? own_addr[5] + 1 : own_addr[5] - conf_counter,
+			own_addr[0], own_addr[1], own_addr[2],
+			own_addr[3], (conf_counter == 0) ? own_addr[4] + 1 : own_addr[4] - conf_counter,
+			(conf_counter == 0) ? own_addr[5] + 1 : own_addr[5] - conf_counter);
+		fprintf(f,
+			"r0kh=%02x:%02x:%02x:%02x:%02x:%02x %02x%02x%02x%02x%02x%02x 000102030405060708090a0b0c0d0e0f\n",
+			own_addr[0], own_addr[1], own_addr[2],
+			own_addr[3], (conf_counter == 0) ? own_addr[4] + 1 : own_addr[4] - conf_counter,
+			(conf_counter == 0) ? own_addr[5] + 1 : own_addr[5] - conf_counter,
+			own_addr[0], own_addr[1], own_addr[2],
+			own_addr[3], (conf_counter == 0) ? own_addr[4] + 1 : own_addr[4] - conf_counter,
+			(conf_counter == 0) ? own_addr[5] + 1 : own_addr[5] - conf_counter);
+
+		for (j = 0; j < dut->ft_bss_mac_cnt; j++) {
+			if (dut->program == PROGRAM_MBO || dut->program == PROGRAM_WPA3) {
+				memcpy(ap2_addr, dut->ft_bss_mac_list[j], ETH_ALEN);
+				fprintf(f,
+					"r0kh=%02x:%02x:%02x:%02x:%02x:%02x %02x%02x%02x%02x%02x%02x 000102030405060708090a0b0c0d0e0f\n",
+					ap2_addr[0], ap2_addr[1], ap2_addr[2],
+					ap2_addr[3], ap2_addr[4], ap2_addr[5],
+					ap2_addr[0], ap2_addr[1], ap2_addr[2],
+					ap2_addr[3], ap2_addr[4], ap2_addr[5]);
+				fprintf(f,
+					"r1kh=%02x:%02x:%02x:%02x:%02x:%02x %02x:%02x:%02x:%02x:%02x:%02x 000102030405060708090a0b0c0d0e0f\n",
+					ap2_addr[0], ap2_addr[1], ap2_addr[2],
+					ap2_addr[3], ap2_addr[4], ap2_addr[5],
+					ap2_addr[0], ap2_addr[1], ap2_addr[2],
+					ap2_addr[3], ap2_addr[4], ap2_addr[5]);
+			} else {
+				fprintf(f,
+					"r0kh=ff:ff:ff:ff:ff:ff * 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+				fprintf(f,
+					"r1kh=00:00:00:00:00:00 00:00:00:00:00:00 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+			}
 		}
 	}
 
-- 
2.34.1

