From 40460315ed2b9def889df76e2da210669d0244c9 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Fri, 18 Aug 2023 16:00:24 +0530
Subject: [PATCH 1/2] control_app: convert unsafe string manipulation functions
 part 1

Currently at many places unsafe version of string manipulation
functions are used.

Hence, change all occurence of -
  * strcpy/strncpy to strlcpy
  * strcat/strncat to strlcat
  * strtokto       to strtok_r

The laters are much safer alternatives for the formers.

No functionality changes.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 hs2_profile.h             |   6 +-
 indigo_api_callback.h     |   2 +
 indigo_api_callback_dut.c | 201 +++++++++++++++++++-------------------
 indigo_api_callback_tp.c  | 118 +++++++++++-----------
 indigo_packet.c           |   4 +-
 utils.c                   |  28 +++---
 vendor_specific_dut.c     |   7 +-
 vendor_specific_tp.c      |   2 +-
 8 files changed, 186 insertions(+), 182 deletions(-)

diff --git a/hs2_profile.h b/hs2_profile.h
index d24d2176f211..6f2607aff253 100644
--- a/hs2_profile.h
+++ b/hs2_profile.h
@@ -189,12 +189,12 @@ struct tlv_to_profile* find_tlv_hs2_profile(int tlv_id) {
     return NULL;
 }
 
-void attach_hs20_icons(char * buffer) {
+void attach_hs20_icons(char * buffer, int buffer_size) {
     int i;
     for (i = 0; i < ARRAY_SIZE(hs20_icon); i++) {
-        strcat(buffer, hs20_icon[i]);
+        strlcat(buffer, hs20_icon[i], buffer_size);
     }
     return;
 }
 
-#endif // _HS2_PROFILE
\ No newline at end of file
+#endif // _HS2_PROFILE
diff --git a/indigo_api_callback.h b/indigo_api_callback.h
index 758513ecd985..a8cdce9a1394 100644
--- a/indigo_api_callback.h
+++ b/indigo_api_callback.h
@@ -143,6 +143,8 @@ struct tlv_to_config_name maps[] = {
     { TLV_EAP_FRAG_SIZE, "fragment_size", 0 },
 };
 
+#define TLV_CONFIG_NAME_LEN    32
+
 struct tlv_to_config_name semicolon_list[] = {
     { TLV_ROAMING_CONSORTIUM, "roaming_consortium", 0 },
 };
diff --git a/indigo_api_callback_dut.c b/indigo_api_callback_dut.c
index b3eda4eeda5b..9c1c7deaca06 100644
--- a/indigo_api_callback_dut.c
+++ b/indigo_api_callback_dut.c
@@ -356,7 +356,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
         if (tlv->id == TLV_BSS_IDENTIFIER) {
             use_mbss = 1;
             if (is_band_enabled(BAND_6GHZ) && !wlanp->mbssid_enable) {
-                strcat(output, "rnr=1\n");
+                strlcat(output, "rnr=1\n", output_size);
             }
             continue;
         }
@@ -366,15 +366,15 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
          * (use semicolon to separate multiple configurations) */
         cfg = find_generic_tlv_config(tlv->id, semicolon_list, semicolon_list_size);
         if (cfg) {
-            char *token = NULL, *delimit = ";";
+            char *token = NULL, *delimit = ";", *save_ptr = NULL;
 
             memcpy(buffer, tlv->value, tlv->len);
-            token = strtok(buffer, delimit);
+            token = strtok_r(buffer, delimit, &save_ptr);
  
             while(token != NULL) {
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, token);
-                strcat(output, cfg_item);
-                token = strtok(NULL, delimit);
+                strlcat(output, cfg_item, output_size);
+                token = strtok_r(NULL, delimit, &save_ptr);
             }
             continue;
         }
@@ -385,7 +385,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             memset(mac_addr, 0, sizeof(mac_addr));
             get_mac_address(mac_addr, sizeof(mac_addr), get_wireless_interface());
             sprintf(cfg_item, "hessid=%s\n", mac_addr);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             continue;
         }
 
@@ -396,7 +396,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             memcpy(buffer, tlv->value, tlv->len);
 
             if (((tlv->id == TLV_OSU_PROVIDERS_LIST) || (tlv->id == TLV_OPERATOR_ICON_METADATA)) && (!hs20_icons_attached)) {
-                attach_hs20_icons(output);
+                attach_hs20_icons(output, output_size);
                 hs20_icons_attached = 1;
             }
 
@@ -407,7 +407,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             }
 
             sprintf(cfg_item, "%s", hs2_config);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             continue;
         }
 
@@ -428,7 +428,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
                 for (j = 0; j < AP_SETTING_NUM; j++) {
                     memset(cfg_item, 0, sizeof(cfg_item));
                     sprintf(cfg_item, "%s=%s\n", s[j].wkey, s[j].value);
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
                 indigo_logger(LOG_LEVEL_INFO, "APUT Configure WPS: OOB.");
             } else if (atoi(buffer) == WPS_ENABLE_NORMAL){
@@ -446,7 +446,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
                     if (atoi(s[j].attr) == atoi(WPS_COMMON)) {
                         sprintf(cfg_item, "%s=%s\n", s[j].wkey, s[j].value);
                     }
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
                 indigo_logger(LOG_LEVEL_INFO, "APUT Configure WPS: Manually Configured.");
             } else {
@@ -459,13 +459,13 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
         if (tlv->id == TLV_WPS_ER_SUPPORT) {
             memset(cfg_item, 0, sizeof(cfg_item));
             sprintf(cfg_item, "upnp_iface=%s\n", wlanp->ifname);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             memset(cfg_item, 0, sizeof(cfg_item));
             sprintf(cfg_item, "friendly_name=WPS Access Point\n");
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             memset(cfg_item, 0, sizeof(cfg_item));
             sprintf(cfg_item, "model_description=Wireless Access Point\n");
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             continue;
         }
 
@@ -591,17 +591,17 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             if (wlan) {
                 memcpy(buffer, wlan->ifname, strlen(wlan->ifname));
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, buffer);
-                strcat(output, cfg_item);
+                strlcat(output, cfg_item, output_size);
                 if (has_owe) {
                     memset(cfg_item, 0, sizeof(cfg_item));
                     sprintf(cfg_item, "ignore_broadcast_ssid=1\n");
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
             }
         } else {
             memcpy(buffer, tlv->value, tlv->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, buffer);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
         }
     }
 
@@ -609,35 +609,35 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
     if (enable_wps) {
         if (use_mbss) {
             /* The wps test for mbss should always be dual concurrent. */
-            strcat(output, "wps_rf_bands=ag\n");
+            strlcat(output, "wps_rf_bands=ag\n", output_size);
         } else {
             if (!strncmp(band, "a", 1)) {
-                strcat(output, "wps_rf_bands=a\n");
+                strlcat(output, "wps_rf_bands=a\n", output_size);
             } else if (!strncmp(band, "g", 1)) {
-                strcat(output, "wps_rf_bands=g\n");
+                strlcat(output, "wps_rf_bands=g\n", output_size);
             }
         }
     }
 
     if (has_pmf == 0) {
         if (has_transition) {
-            strcat(output, "ieee80211w=1\n");
+            strlcat(output, "ieee80211w=1\n", output_size);
         } else if (has_sae && has_wpa) {
-            strcat(output, "ieee80211w=2\n");
+            strlcat(output, "ieee80211w=2\n", output_size);
         } else if (has_owe) {
-            strcat(output, "ieee80211w=2\n");
+            strlcat(output, "ieee80211w=2\n", output_size);
         } else if (has_wpa) {
-            strcat(output, "ieee80211w=1\n");
+            strlcat(output, "ieee80211w=1\n", output_size);
         }            
     }
 
     if (has_sae == 1) {
-        strcat(output, "sae_require_mfp=1\n");
+        strlcat(output, "sae_require_mfp=1\n", output_size);
     }
 
 #if HOSTAPD_SUPPORT_MBSSID
     if (wlanp->mbssid_enable && wlanp->transmitter) {
-        strcat(output, "multiple_bssid=1\n");
+        strlcat(output, "multiple_bssid=1\n", output_size);
     }
 #endif
 
@@ -651,7 +651,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
     //     hostapd_config += "\n" + field_name + "=15 16 17 18 19 20 21"
     // Append the default SAE groups for SAE and no SAE groups TLV
     if (has_sae && has_sae_groups == 0) {
-        strcat(output, "sae_groups=15 16 17 18 19 20 21\n");
+        strlcat(output, "sae_groups=15 16 17 18 19 20 21\n", output_size);
     }
 
     // Channel width configuration
@@ -661,34 +661,34 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
 
     /* Add country IE if there is no country config */
     if (strlen(country) == 0) {
-        strcat(output, "ieee80211d=1\n");
-        strcat(output, "country_code=US\n");
+        strlcat(output, "ieee80211d=1\n", output_size);
+        strlcat(output, "country_code=US\n", output_size);
     }
 
     if (is_6g_only) {
         if (chwidthset == 0) {
             sprintf(buffer, "he_oper_chwidth=%d\n", chwidth);
-            strcat(output, buffer);
+            strlcat(output, buffer, output_size);
         }
         if (chwidth == 1)
-            strcat(output, "op_class=133\n");
+            strlcat(output, "op_class=133\n", output_size);
         else if (chwidth == 2)
-            strcat(output, "op_class=134\n");
+            strlcat(output, "op_class=134\n", output_size);
         sprintf(buffer, "he_oper_centr_freq_seg0_idx=%d\n", get_6g_center_freq_index(channel, chwidth));
-        strcat(output, buffer);
+        strlcat(output, buffer, output_size);
         if (unsol_pr_resp_interval) {
             sprintf(buffer, "unsol_bcast_probe_resp_interval=%d\n", unsol_pr_resp_interval);
-            strcat(output, buffer);
+            strlcat(output, buffer, output_size);
         } else {
-            strcat(output, "fils_discovery_max_interval=20\n");
+            strlcat(output, "fils_discovery_max_interval=20\n", output_size);
         }
         /* Enable bss_color IE */
-        strcat(output, "he_bss_color=19\n");
+        strlcat(output, "he_bss_color=19\n", output_size);
     } else if (strstr(band, "a")) {
         if (is_ht40plus_chan(channel))
-            strcat(output, "ht_capab=[HT40+]\n");
+            strlcat(output, "ht_capab=[HT40+]\n", output_size);
         else if (is_ht40minus_chan(channel))
-            strcat(output, "ht_capab=[HT40-]\n");
+            strlcat(output, "ht_capab=[HT40-]\n", output_size);
         else // Ch 165 and avoid hostapd configuration error
             chwidth = 0;
         if (chwidth > 0) {
@@ -696,19 +696,19 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
 #ifndef _WTS_OPENWRT_
             if (chwidth == 2) {
                 /* 160M: Need to enable 11h for DFS */
-                strcat(output, "ieee80211h=1\n");
+                strlcat(output, "ieee80211h=1\n", output_size);
             }
 #endif
             if (enable_ac) {
                 if (vht_chwidthset == 0) {
                     sprintf(buffer, "vht_oper_chwidth=%d\n", chwidth);
-                    strcat(output, buffer);
+                    strlcat(output, buffer, output_size);
                 }
                 sprintf(buffer, "vht_oper_centr_freq_seg0_idx=%d\n", center_freq);
-                strcat(output, buffer);
+                strlcat(output, buffer, output_size);
 #ifndef _WTS_OPENWRT_
                 if (chwidth == 2) {
-                    strcat(output, "vht_capab=[VHT160]\n");
+                    strlcat(output, "vht_capab=[VHT160]\n", output_size);
                 }
 #endif
             }
@@ -716,51 +716,51 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
 #ifndef _WTS_OPENWRT_
                 if (chwidthset == 0) {
                     sprintf(buffer, "he_oper_chwidth=%d\n", chwidth);
-                    strcat(output, buffer);
+                    strlcat(output, buffer, output_size);
                 }
                 sprintf(buffer, "he_oper_centr_freq_seg0_idx=%d\n", center_freq);
-                strcat(output, buffer);
+                strlcat(output, buffer, output_size);
 #endif
             }
         }
     }
 
     if (enable_muedca) {
-        strcat(output, "he_mu_edca_qos_info_queue_request=1\n");
-        strcat(output, "he_mu_edca_ac_be_aifsn=0\n");
-        strcat(output, "he_mu_edca_ac_be_ecwmin=15\n");
-        strcat(output, "he_mu_edca_ac_be_ecwmax=15\n");
-        strcat(output, "he_mu_edca_ac_be_timer=255\n");
-        strcat(output, "he_mu_edca_ac_bk_aifsn=0\n");
-        strcat(output, "he_mu_edca_ac_bk_aci=1\n");
-        strcat(output, "he_mu_edca_ac_bk_ecwmin=15\n");
-        strcat(output, "he_mu_edca_ac_bk_ecwmax=15\n");
-        strcat(output, "he_mu_edca_ac_bk_timer=255\n");
-        strcat(output, "he_mu_edca_ac_vi_ecwmin=15\n");
-        strcat(output, "he_mu_edca_ac_vi_ecwmax=15\n");
-        strcat(output, "he_mu_edca_ac_vi_aifsn=0\n");
-        strcat(output, "he_mu_edca_ac_vi_aci=2\n");
-        strcat(output, "he_mu_edca_ac_vi_timer=255\n");
-        strcat(output, "he_mu_edca_ac_vo_aifsn=0\n");
-        strcat(output, "he_mu_edca_ac_vo_aci=3\n");
-        strcat(output, "he_mu_edca_ac_vo_ecwmin=15\n");
-        strcat(output, "he_mu_edca_ac_vo_ecwmax=15\n");
-        strcat(output, "he_mu_edca_ac_vo_timer=255\n");
+        strlcat(output, "he_mu_edca_qos_info_queue_request=1\n", output_size);
+        strlcat(output, "he_mu_edca_ac_be_aifsn=0\n", output_size);
+        strlcat(output, "he_mu_edca_ac_be_ecwmin=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_be_ecwmax=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_be_timer=255\n", output_size);
+        strlcat(output, "he_mu_edca_ac_bk_aifsn=0\n", output_size);
+        strlcat(output, "he_mu_edca_ac_bk_aci=1\n", output_size);
+        strlcat(output, "he_mu_edca_ac_bk_ecwmin=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_bk_ecwmax=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_bk_timer=255\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vi_ecwmin=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vi_ecwmax=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vi_aifsn=0\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vi_aci=2\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vi_timer=255\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vo_aifsn=0\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vo_aci=3\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vo_ecwmin=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vo_ecwmax=15\n", output_size);
+        strlcat(output, "he_mu_edca_ac_vo_timer=255\n", output_size);
     }
 
 #if defined(_OPENWRT_) && !defined(_WTS_OPENWRT_)
     /* Make sure AP include power constranit element even in non DFS channel */
     if (enable_11h) {
-        strcat(output, "spectrum_mgmt_required=1\n");
-        strcat(output, "local_pwr_constraint=3\n");
+        strlcat(output, "spectrum_mgmt_required=1\n", output_size);
+        strlcat(output, "local_pwr_constraint=3\n", output_size);
     }
 #endif
     if (enable_hs20) {
-        strcat(output, "hs20_release=3\n");
-        strcat(output, "manage_p2p=1\n");
-        strcat(output, "allow_cross_connection=0\n");
-        strcat(output, "bss_load_update_period=100\n");
-        strcat(output, "hs20_deauth_req_timeout=3\n");
+        strlcat(output, "hs20_release=3\n", output_size);
+        strlcat(output, "manage_p2p=1\n", output_size);
+        strlcat(output, "allow_cross_connection=0\n", output_size);
+        strlcat(output, "bss_load_update_period=100\n", output_size);
+        strlcat(output, "hs20_deauth_req_timeout=3\n", output_size);
     }
 
     /* vendor specific config, not via hostapd */
@@ -1155,7 +1155,7 @@ static int assign_static_ip_handler(struct packet_wrapper *req, struct packet_wr
     /* Bring up interface */
     control_interface(ifname, "up");
     /* Set IP address with network mask */
-    strcat(buffer, "/24");
+    strlcat(buffer, "/24", 64);
     len = set_interface_ip(ifname, buffer);
     if (len) {
         message = TLV_VALUE_ASSIGN_STATIC_IP_NOT_OK;
@@ -1474,7 +1474,7 @@ static int set_ap_parameter_handler(struct packet_wrapper *req, struct packet_wr
     char *message = NULL;
     char buffer[8192];
     char response[1024];
-    char param_name[32];
+    char param_name[TLV_CONFIG_NAME_LEN];
     char param_value[256];
     struct tlv_hdr *tlv = NULL;
     struct wpa_ctrl *w = NULL;
@@ -1496,7 +1496,7 @@ static int set_ap_parameter_handler(struct packet_wrapper *req, struct packet_wr
         tlv = find_wrapper_tlv_by_id(req, TLV_GAS_COMEBACK_DELAY);
     }
     if (tlv && find_tlv_config_name(tlv->id) != NULL) {
-        strcpy(param_name, find_tlv_config_name(tlv->id));
+        strlcpy(param_name, find_tlv_config_name(tlv->id), TLV_CONFIG_NAME_LEN);
         memcpy(param_value, tlv->value, tlv->len);
     } else {
         status = TLV_VALUE_STATUS_NOT_OK;
@@ -1605,31 +1605,31 @@ static int send_ap_btm_handler(struct packet_wrapper *req, struct packet_wrapper
     if (strlen(disassoc_imminent)) {
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, " disassoc_imminent=%s", disassoc_imminent);
-        strcat(request, buffer);
+        strlcat(request, buffer, 4096);
     }
     /* disassoc_timer=%s */
     if (strlen(disassoc_timer)) {
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, " disassoc_timer=%s", disassoc_timer);
-        strcat(request, buffer);
+        strlcat(request, buffer, 4096);
     }
     /* reassoc_retry_delay=%s */
     if (strlen(reassoc_retry_delay)) {
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, " mbo=0:%s:0", reassoc_retry_delay);
-        strcat(request, buffer);
+        strlcat(request, buffer, 4096);
     }
     /* if bss_term_bit && bss_term_tsf && bss_term_duration, then bss_term={bss_term_tsf},{bss_term_duration} */
     if (strlen(bss_term_bit) && strlen(bss_term_tsf) && strlen(bss_term_duration) ) {
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, " bss_term=%s,%s", bss_term_tsf, bss_term_duration);
-        strcat(request, buffer);
+        strlcat(request, buffer, 4096);
     }
     /* candidate_list */
     if (strlen(candidate_list) && atoi(candidate_list) == 1) {
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, " pref=1");
-        strcat(request, buffer);
+        strlcat(request, buffer, 4096);
     }
     indigo_logger(LOG_LEVEL_DEBUG, "cmd:%s", request);
 
@@ -1882,11 +1882,11 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
             memset(value, 0, sizeof(value));
             memcpy(value, wrapper->tlv[i]->value, wrapper->tlv[i]->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-            strcat(buffer, cfg_item);
+            strlcat(buffer, cfg_item, buffer_size);
         }
     }
 
-    strcat(buffer, "network={\n");
+    strlcat(buffer, "network={\n", buffer_size);
 
 #ifdef _RESERVED_
     /* The function is reserved for the defeault wpas config */
@@ -1925,21 +1925,21 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
 
             if (cfg->quoted) {
                 sprintf(cfg_item, "%s=\"%s\"\n", cfg->config_name, value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, buffer_size);
             } else {
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, buffer_size);
             }
         }
     }
 
     if (ieee80211w_configured == 0) {
         if (transition_mode_enabled) {
-            strcat(buffer, "ieee80211w=1\n");
+            strlcat(buffer, "ieee80211w=1\n", buffer_size);
         } else if (sae_only) {
-            strcat(buffer, "ieee80211w=2\n");
+            strlcat(buffer, "ieee80211w=2\n", buffer_size);
         } else if (owe_configured) {
-            strcat(buffer, "ieee80211w=2\n");
+            strlcat(buffer, "ieee80211w=2\n", buffer_size);
         }
     }
 
@@ -1958,7 +1958,7 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
         wps_config = appended_supplicant_conf_str.rstrip()
     */
 
-    strcat(buffer, "}\n");
+    strlcat(buffer, "}\n", buffer_size);
 
 done:
     return strlen(buffer);
@@ -2102,7 +2102,7 @@ static int set_sta_parameter_handler(struct packet_wrapper *req, struct packet_w
     char *message = NULL;
     char buffer[BUFFER_LEN];
     char response[BUFFER_LEN];
-    char param_name[32];
+    char param_name[TLV_CONFIG_NAME_LEN];
     char param_value[256];
     struct tlv_hdr *tlv = NULL;
     struct wpa_ctrl *w = NULL;
@@ -2120,7 +2120,7 @@ static int set_sta_parameter_handler(struct packet_wrapper *req, struct packet_w
         memset(param_name, 0, sizeof(param_name));
         memset(param_value, 0, sizeof(param_value));
         tlv = req->tlv[i];
-        strcpy(param_name, find_tlv_config_name(tlv->id));
+        strlcpy(param_name, find_tlv_config_name(tlv->id), TLV_CONFIG_NAME_LEN);
         memcpy(param_value, tlv->value, tlv->len);
 
         /* Assemble wpa_supplicant command */
@@ -2185,7 +2185,7 @@ static int send_sta_btm_query_handler(struct packet_wrapper *req, struct packet_
     memset(buffer, 0, sizeof(buffer));
     sprintf(buffer, "WNM_BSS_QUERY %s", reason_code);
     if (strcmp(candidate_list, "1") == 0) {
-        strcat(buffer, " list");
+        strlcat(buffer, " list", 1024);
     }
 
     /* Send command to wpa_supplicant UDS socket */
@@ -2221,6 +2221,7 @@ static int send_sta_anqp_query_handler(struct packet_wrapper *req, struct packet
     size_t resp_len;
     char *token = NULL;
     char *delimit = ";";
+    char *save_ptr = NULL;
     char realm[S_BUFFER_LEN];
 
     /* It may need to check whether to just scan */
@@ -2286,19 +2287,19 @@ static int send_sta_anqp_query_handler(struct packet_wrapper *req, struct packet
             goto done;
         }
     } else {
-        token = strtok(anqp_info_id, delimit);
+        token = strtok_r(anqp_info_id, delimit, &save_ptr);
         memset(buffer, 0, sizeof(buffer));
         sprintf(buffer, "ANQP_GET %s ", bssid);
         while(token != NULL) {
             for (i = 0; i < sizeof(anqp_maps)/sizeof(struct anqp_tlv_to_config_name); i++) {
                 if (strcmp(token, anqp_maps[i].element) == 0) {
-                    strcat(buffer, anqp_maps[i].config);
+                    strlcat(buffer, anqp_maps[i].config, 1024);
                 }
             }
 
-            token = strtok(NULL, delimit);
+            token = strtok_r(NULL, delimit, &save_ptr);
             if (token != NULL) {
-                strcat(buffer, ",");
+                strlcat(buffer, ",", 1024);
             }
         }
     }
@@ -2345,10 +2346,10 @@ static int start_up_p2p_handler(struct packet_wrapper *req, struct packet_wrappe
     /* Generate P2P config file */
     sprintf(buffer, "ctrl_interface=%s\n", WPAS_CTRL_PATH_DEFAULT);
     /* Add Device name and Device type */
-    strcat(buffer, "device_name=WFA P2P Device\n");
-    strcat(buffer, "device_type=1-0050F204-1\n");
+    strlcat(buffer, "device_name=WFA P2P Device\n", S_BUFFER_LEN);
+    strlcat(buffer, "device_type=1-0050F204-1\n", S_BUFFER_LEN);
     /* Add config methods */
-    strcat(buffer, "config_methods=keypad display push_button\n");
+    strlcat(buffer, "config_methods=keypad display push_button\n", S_BUFFER_LEN);
     len = strlen(buffer);
 
     if (len) {
@@ -2664,7 +2665,7 @@ static int sta_scan_handler(struct packet_wrapper *req, struct packet_wrapper *r
         memset(value, 0, sizeof(value));
         memcpy(value, tlv->value, tlv->len);
         sprintf(cfg_item, "pmf=%s\n", value);
-        strcat(buffer, cfg_item);
+        strlcat(buffer, cfg_item, 1024);
     }
     for (i = 0; i < req->tlv_num; i++) {
         cfg = find_wpas_global_config_name(req->tlv[i]->id);
@@ -2672,7 +2673,7 @@ static int sta_scan_handler(struct packet_wrapper *req, struct packet_wrapper *r
             memset(value, 0, sizeof(value));
             memcpy(value, req->tlv[i]->value, req->tlv[i]->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-            strcat(buffer, cfg_item);
+            strlcat(buffer, cfg_item, 1024);
         }
     }
     len = strlen(buffer);
@@ -3734,7 +3735,7 @@ static int enable_wsc_sta_handler(struct packet_wrapper *req, struct packet_wrap
             memset(value, 0, sizeof(value));
             memcpy(value, req->tlv[i]->value, req->tlv[i]->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-            strcat(buffer, cfg_item);
+            strlcat(buffer, cfg_item, L_BUFFER_LEN);
         }
     }
 
@@ -3751,7 +3752,7 @@ static int enable_wsc_sta_handler(struct packet_wrapper *req, struct packet_wrap
             for (i = 0; i < STA_SETTING_NUM; i++) {
                 memset(cfg_item, 0, sizeof(cfg_item));
                 sprintf(cfg_item, "%s=%s\n", s[i].wkey, s[i].value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, L_BUFFER_LEN);
             }
             indigo_logger(LOG_LEVEL_INFO, "STAUT Configure WPS");
         } else {
diff --git a/indigo_api_callback_tp.c b/indigo_api_callback_tp.c
index 2e14d9b41059..143ad9e95fb7 100644
--- a/indigo_api_callback_tp.c
+++ b/indigo_api_callback_tp.c
@@ -280,26 +280,26 @@ static void append_hostapd_default_config(struct packet_wrapper *wrapper) {
 }
 #endif /* _RESERVED_ */
 
-static void add_mu_edca_params(char *output) {
-    strcat(output, "he_mu_edca_ac_be_aifsn=0\n");
-    strcat(output, "he_mu_edca_ac_be_ecwmin=15\n");
-    strcat(output, "he_mu_edca_ac_be_ecwmax=15\n");
-    strcat(output, "he_mu_edca_ac_be_timer=255\n");
-    strcat(output, "he_mu_edca_ac_bk_aifsn=0\n");
-    strcat(output, "he_mu_edca_ac_bk_aci=1\n");
-    strcat(output, "he_mu_edca_ac_bk_ecwmin=15\n");
-    strcat(output, "he_mu_edca_ac_bk_ecwmax=15\n");
-    strcat(output, "he_mu_edca_ac_bk_timer=255\n");
-    strcat(output, "he_mu_edca_ac_vi_aifsn=0\n");
-    strcat(output, "he_mu_edca_ac_vi_aci=2\n");
-    strcat(output, "he_mu_edca_ac_vi_ecwmin=15\n");
-    strcat(output, "he_mu_edca_ac_vi_ecwmax=15\n");
-    strcat(output, "he_mu_edca_ac_vi_timer=255\n");
-    strcat(output, "he_mu_edca_ac_vo_aifsn=0\n");
-    strcat(output, "he_mu_edca_ac_vo_aci=3\n");
-    strcat(output, "he_mu_edca_ac_vo_ecwmin=15\n");
-    strcat(output, "he_mu_edca_ac_vo_ecwmax=15\n");
-    strcat(output, "he_mu_edca_ac_vo_timer=255\n");
+static void add_mu_edca_params(char *output, int output_size) {
+    strlcat(output, "he_mu_edca_ac_be_aifsn=0\n", output_size);
+    strlcat(output, "he_mu_edca_ac_be_ecwmin=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_be_ecwmax=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_be_timer=255\n", output_size);
+    strlcat(output, "he_mu_edca_ac_bk_aifsn=0\n", output_size);
+    strlcat(output, "he_mu_edca_ac_bk_aci=1\n", output_size);
+    strlcat(output, "he_mu_edca_ac_bk_ecwmin=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_bk_ecwmax=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_bk_timer=255\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vi_aifsn=0\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vi_aci=2\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vi_ecwmin=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vi_ecwmax=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vi_timer=255\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vo_aifsn=0\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vo_aci=3\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vo_ecwmin=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vo_ecwmax=15\n", output_size);
+    strlcat(output, "he_mu_edca_ac_vo_timer=255\n", output_size);
 }
 
 static int generate_hostapd_config(char *output, int output_size, struct packet_wrapper *wrapper, struct interface_info* wlanp) {
@@ -358,15 +358,15 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
          * (use semicolon to separate multiple configurations) */
         cfg = find_generic_tlv_config(tlv->id, semicolon_list, semicolon_list_size);
         if (cfg) {
-            char *token = NULL, *delimit = ";";
+            char *token = NULL, *delimit = ";", *save_ptr = NULL;
 
             memcpy(buffer, tlv->value, tlv->len);
-            token = strtok(buffer, delimit);
+            token = strtok_r(buffer, delimit, &save_ptr);
  
             while(token != NULL) {
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, token);
-                strcat(output, cfg_item);
-                token = strtok(NULL, delimit);
+                strlcat(output, cfg_item, output_size);
+                token = strtok_r(NULL, delimit, &save_ptr);
             }
             continue;
         }
@@ -389,7 +389,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             memset(mac_addr, 0, sizeof(mac_addr));
             get_mac_address(mac_addr, sizeof(mac_addr), get_wireless_interface());
             sprintf(cfg_item, "hessid=%s\n", mac_addr);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             continue;
         }
 
@@ -400,7 +400,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             memcpy(buffer, tlv->value, tlv->len);
 
             if (((tlv->id == TLV_OSU_PROVIDERS_LIST) || (tlv->id == TLV_OPERATOR_ICON_METADATA)) && (!hs20_icons_attached)) {
-                attach_hs20_icons(output);
+                attach_hs20_icons(output, output_size);
                 hs20_icons_attached = 1;
             }
 
@@ -415,7 +415,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             }
 
             sprintf(cfg_item, "%s", hs2_config);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
             continue;
         }
 
@@ -444,7 +444,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
                 for (j = 0; j < AP_SETTING_NUM; j++) {
                     memset(cfg_item, 0, sizeof(cfg_item));
                     sprintf(cfg_item, "%s=%s\n", s[j].wkey, s[j].value);
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
                 indigo_logger(LOG_LEVEL_INFO, "AP Configure WPS: OOB.");
             } else if (atoi(buffer) == WPS_ENABLE_NORMAL) {
@@ -462,7 +462,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
                     if (atoi(s[j].attr) ==  atoi(WPS_COMMON)) {
                         sprintf(cfg_item, "%s=%s\n", s[j].wkey, s[j].value);
                     }
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
                 indigo_logger(LOG_LEVEL_INFO, "AP Configure WPS: Manually Configured.");
             } else {
@@ -480,7 +480,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
         if (tlv->id == TLV_EAP_FRAG_SIZE) {
             memcpy(buffer, tlv->value, tlv->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, buffer);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
         }
 
 #ifdef _WTS_OPENWRT_
@@ -572,11 +572,11 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             if (wlan) {
                 memcpy(buffer, wlan->ifname, strlen(wlan->ifname));
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, buffer);
-                strcat(output, cfg_item);
+                strlcat(output, cfg_item, output_size);
                 if (has_owe) {
                     memset(cfg_item, 0, sizeof(cfg_item));
                     sprintf(cfg_item, "ignore_broadcast_ssid=1\n");
-                    strcat(output, cfg_item);
+                    strlcat(output, cfg_item, output_size);
                 }
             }
         } else {
@@ -585,7 +585,7 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             if (tlv->id == TLV_HE_FILS_DISCOVERY_TX)
                 snprintf(buffer, sizeof(buffer), "20");
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, buffer);
-            strcat(output, cfg_item);
+            strlcat(output, cfg_item, output_size);
         }
 
         if (tlv->id == TLV_CONTROL_INTERFACE) {
@@ -595,19 +595,19 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
             set_hapd_ctrl_path(buffer);
         }
         if (tlv->id == TLV_HE_MU_EDCA)
-            add_mu_edca_params(output);
+            add_mu_edca_params(output, output_size);
     }
 
     /* add rf band according to TLV_BSS_IDENTIFIER/TLV_HW_MODE/TLV_WPS_ENABLE */
     if (enable_wps) {
         if (use_mbss) {
             /* The wps test for mbss should always be dual concurrent. */
-            strcat(output, "wps_rf_bands=ag\n");
+            strlcat(output, "wps_rf_bands=ag\n", output_size);
         } else {
             if (is_a_mode) {
-                strcat(output, "wps_rf_bands=a\n");
+                strlcat(output, "wps_rf_bands=a\n", output_size);
             } else if (is_g_mode) {
-                strcat(output, "wps_rf_bands=g\n");
+                strlcat(output, "wps_rf_bands=g\n", output_size);
             }
         }
     }
@@ -618,16 +618,16 @@ static int generate_hostapd_config(char *output, int output_size, struct packet_
     }
 #if HOSTAPD_SUPPORT_MBSSID
     if (wlanp->mbssid_enable && wlanp->transmitter) {
-        strcat(output, "multiple_bssid=1\n");
+        strlcat(output, "multiple_bssid=1\n", output_size);
     }
 #endif
     if (enable_hs20) {
-        strcat(output, "hs20_release=3\n");
-        strcat(output, "manage_p2p=1\n");
-        strcat(output, "allow_cross_connection=0\n");
-        strcat(output, "hs20_deauth_req_timeout=3\n");
+        strlcat(output, "hs20_release=3\n", output_size);
+        strlcat(output, "manage_p2p=1\n", output_size);
+        strlcat(output, "allow_cross_connection=0\n", output_size);
+        strlcat(output, "hs20_deauth_req_timeout=3\n", output_size);
         if (bss_load_tlv == 0) {
-            strcat(output, "bss_load_update_period=100\n");
+            strlcat(output, "bss_load_update_period=100\n", output_size);
         }
     }
 
@@ -929,7 +929,7 @@ static int assign_static_ip_handler(struct packet_wrapper *req, struct packet_wr
     /* Bring up interface */
     control_interface(ifname, "up");
     /* Set IP address with network mask */
-    strcat(buffer, "/24");
+    strlcat(buffer, "/24", 64);
     len = set_interface_ip(ifname, buffer);
     if (len) {
         message = TLV_VALUE_ASSIGN_STATIC_IP_NOT_OK;
@@ -1453,10 +1453,10 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
             memset(value, 0, sizeof(value));
             memcpy(value, wrapper->tlv[i]->value, wrapper->tlv[i]->len);
             sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-            strcat(buffer, cfg_item);
+            strlcat(buffer, cfg_item, buffer_size);
         }
     }
-    strcat(buffer, "network={\n");
+    strlcat(buffer, "network={\n", buffer_size);
 
 #ifdef _RESERVED_
     /* The function is reserved for the defeault wpas config */
@@ -1489,21 +1489,21 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
 
             if (cfg->quoted) {
                 sprintf(cfg_item, "%s=\"%s\"\n", cfg->config_name, value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, buffer_size);
             } else {
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, buffer_size);
             }
         }        
     }
 
     if (ieee80211w_configured == 0) {
         if (transition_mode_enabled) {
-            strcat(buffer, "ieee80211w=1\n");
+            strlcat(buffer, "ieee80211w=1\n", buffer_size);
         } else if (sae_only) {
-            strcat(buffer, "ieee80211w=2\n");
+            strlcat(buffer, "ieee80211w=2\n", buffer_size);
         } else if (owe_configured) {
-            strcat(buffer, "ieee80211w=2\n");
+            strlcat(buffer, "ieee80211w=2\n", buffer_size);
         }
     }
 
@@ -1522,7 +1522,7 @@ static int generate_wpas_config(char *buffer, int buffer_size, struct packet_wra
         wps_config = appended_supplicant_conf_str.rstrip()
     */
 
-    strcat(buffer, "}\n");
+    strlcat(buffer, "}\n", buffer_size);
 
     return strlen(buffer);
 }
@@ -1645,7 +1645,7 @@ static int start_up_sta_handler(struct packet_wrapper *req, struct packet_wrappe
             memset(value, 0, sizeof(value));
             memcpy(value, tlv->value, tlv->len);
             sprintf(cfg_item, "pmf=%s\n", value);
-            strcat(buffer, cfg_item);
+            strlcat(buffer, cfg_item, BUFFER_LEN);
         }
 
         for (i = 0; i < req->tlv_num; i++) {
@@ -1654,7 +1654,7 @@ static int start_up_sta_handler(struct packet_wrapper *req, struct packet_wrappe
                 memset(value, 0, sizeof(value));
                 memcpy(value, req->tlv[i]->value, req->tlv[i]->len);
                 sprintf(cfg_item, "%s=%s\n", cfg->config_name, value);
-                strcat(buffer, cfg_item);
+                strlcat(buffer, cfg_item, BUFFER_LEN);
             }
         }
 
@@ -1684,7 +1684,7 @@ static int start_up_sta_handler(struct packet_wrapper *req, struct packet_wrappe
                 for (j = 0; j < STA_SETTING_NUM; j++) {
                     memset(cfg_item, 0, sizeof(cfg_item));
                     sprintf(cfg_item, "%s=%s\n", s[j].wkey, s[j].value);
-                    strcat(buffer, cfg_item);
+                    strlcat(buffer, cfg_item, BUFFER_LEN);
                 }
                 indigo_logger(LOG_LEVEL_INFO, "STA Configure WPS");
             } else {
@@ -1693,7 +1693,7 @@ static int start_up_sta_handler(struct packet_wrapper *req, struct packet_wrappe
         }
 
         if (ssid_len) {
-            strcat(buffer, ssid);
+            strlcat(buffer, ssid, BUFFER_LEN);
         }
         len = strlen(buffer);
 
@@ -1945,10 +1945,10 @@ static int start_up_p2p_handler(struct packet_wrapper *req, struct packet_wrappe
         sprintf(buffer, "ctrl_interface=%s\n", value);
 
         /* Add Device name and Device type */
-        strcat(buffer, "device_name=WFA P2P Device\n");
-        strcat(buffer, "device_type=1-0050F204-1\n");
+        strlcat(buffer, "device_name=WFA P2P Device\n", S_BUFFER_LEN);
+        strlcat(buffer, "device_type=1-0050F204-1\n", S_BUFFER_LEN);
         /* Add config methods */
-        strcat(buffer, "config_methods=keypad display push_button\n");
+        strlcat(buffer, "config_methods=keypad display push_button\n", S_BUFFER_LEN);
         len = strlen(buffer);
 
         if (len) {
diff --git a/indigo_packet.c b/indigo_packet.c
index 36a216625d33..24fc344a9f82 100644
--- a/indigo_packet.c
+++ b/indigo_packet.c
@@ -101,7 +101,7 @@ int parse_packet(struct packet_wrapper *req, char *packet, int packet_len) {
         for (i = 0; i < packet_len; i++) {
             memset(value, 0, sizeof(value));
             sprintf(value, "0x%02x%s", (unsigned char)(packet[i]&0x00ff), (i<packet_len-1) ? ", " : "");
-            strcat(buffer, value);
+            strlcat(buffer, value, buffer_len);
         }
         write_file(fn, buffer, strlen(buffer));
         free(buffer);
@@ -263,7 +263,7 @@ void print_tlv(struct tlv_hdr *t) {
     }
     for (i = 0; i < t->len; i++) {
         sprintf(value, "%02x ", t->value[i]);
-        strcat(buffer, value);
+        strlcat(buffer, value, S_BUFFER_LEN);
     }
     indigo_logger(LOG_LEVEL_INFO, buffer);
 }
diff --git a/utils.c b/utils.c
index d152fb4ef658..da93412db28f 100644
--- a/utils.c
+++ b/utils.c
@@ -746,7 +746,7 @@ int find_interface_ip(char *ipaddr, int ipaddr_len, char *name) {
             sa = (struct sockaddr_in *) ifa->ifa_addr;
             addr = inet_ntoa(sa->sin_addr);
             if (ipaddr) {
-                strcpy(ipaddr, addr);
+                strlcpy(ipaddr, addr, ipaddr_len);
             }
             return 1;
         }
@@ -762,7 +762,7 @@ int get_mac_address(char *buffer, int size, char *interface) {
     if (fd <= 0) {
         goto done;
     }
-    strcpy(s.ifr_name, interface);
+    strlcpy(s.ifr_name, interface, sizeof(s.ifr_name));
     if (0 == ioctl(fd, SIOCGIFHWADDR, &s)) {
         sprintf(buffer, "%02x:%02x:%02x:%02x:%02x:%02x", 
             (char)s.ifr_addr.sa_data[0]&0x00ff, (char)s.ifr_addr.sa_data[1]&0x00ff, (char)s.ifr_addr.sa_data[2]&0x00ff, 
@@ -1021,9 +1021,9 @@ int set_hapd_exec_file(char* path) {
     char *ptr = indigo_strrstr(path, "/");
 
     if (ptr) {
-        strcpy(hapd_exec_file, ptr+1);
+        strlcpy(hapd_exec_file, ptr+1, 64);
     } else {
-        strcpy(hapd_exec_file, path);
+        strlcpy(hapd_exec_file, path, 64);
     }
     return 0;
 }
@@ -1106,9 +1106,9 @@ char* get_wpas_exec_file() {
 int set_wpas_exec_file(char* path) {
     char *ptr = indigo_strrstr(path, "/");
     if (ptr) {
-        strcpy(wpas_exec_file, ptr+1);
+        strlcpy(wpas_exec_file, ptr+1, 64);
     } else {
-        strcpy(wpas_exec_file, path);
+        strlcpy(wpas_exec_file, path, 64);
     }
     return 0;
 }
@@ -1177,7 +1177,7 @@ int add_wireless_interface_info(int band, int bssid, char *name) {
     interfaces[interface_count].band = band;
     interfaces[interface_count].bssid = -1;
     interfaces[interface_count].identifier = UNUSED_IDENTIFIER;
-    strcpy(interfaces[interface_count++].ifname, name);
+    strlcpy(interfaces[interface_count++].ifname, name, 16);
     return 0;
 }
 
@@ -1203,9 +1203,9 @@ int show_wireless_interface_info() {
 
 int parse_wireless_interface_info(char *info) {
     char *token = NULL;
-    char *delimit = ",";
+    char *delimit = ",", *save_ptr = NULL;
 
-    token = strtok(info, delimit);
+    token = strtok_r(info, delimit, &save_ptr);
   
     while(token != NULL) {
         if (strncmp(token, "2:", 2) == 0) {
@@ -1217,7 +1217,7 @@ int parse_wireless_interface_info(char *info) {
         } else {
             return -1;
         }
-        token = strtok(NULL, delimit);
+        token = strtok_r(NULL, delimit, &save_ptr);
     }
 
     return 0;
@@ -1318,8 +1318,8 @@ char* get_all_hapd_conf_files(int *swap_hapd) {
             }
 #endif
             valid_id_cnt++;
-            strncat(conf_files, interfaces[i].hapd_conf_file, strlen(interfaces[i].hapd_conf_file));
-            strcat(conf_files, " ");
+            strlcat(conf_files, interfaces[i].hapd_conf_file, 128);
+            strlcat(conf_files, " ", 128);
         }
     }
     if (valid_id_cnt)
@@ -1499,9 +1499,9 @@ int get_key_value(char *value, char *buffer, char *token) {
     ptr += strlen(_token);
     endptr = strstr(ptr, "\n");
     if (endptr) {
-        strncpy(value, ptr, endptr - ptr);
+        strlcpy(value, ptr, endptr - ptr);
     } else {
-        strcpy(value, ptr);
+        strlcpy(value, ptr, S_BUFFER_LEN);
     }
 
     return 0;
diff --git a/vendor_specific_dut.c b/vendor_specific_dut.c
index f8590637d82a..9910f52b5eb1 100644
--- a/vendor_specific_dut.c
+++ b/vendor_specific_dut.c
@@ -411,7 +411,8 @@ void save_wsc_setting(wps_setting *s, char *entry, int len)
 
 wps_setting* __get_wps_setting(int len, char *buffer, enum wps_device_role role)
 {
-    char *token = strtok(buffer , ",");
+    char *save_ptr = NULL;
+    char *token = strtok_r(buffer , ",", &save_ptr);
     wps_setting *s = NULL;
     int i = 0;
 
@@ -421,7 +422,7 @@ wps_setting* __get_wps_setting(int len, char *buffer, enum wps_device_role role)
         while (token != NULL) {
             s = &p_wps_setting[i++];
             save_wsc_setting(s, token, strlen(token));
-            token = strtok(NULL, ",");
+            token = strtok_r(NULL, ",", &save_ptr);
         }
     } else {
         memset(customized_wps_settings_sta, 0, sizeof(customized_wps_settings_sta));
@@ -429,7 +430,7 @@ wps_setting* __get_wps_setting(int len, char *buffer, enum wps_device_role role)
         while (token != NULL) {
             s = &p_wps_setting[i++];
             save_wsc_setting(s, token, strlen(token));
-            token = strtok(NULL, ",");
+            token = strtok_r(NULL, ",", &save_ptr);
         }
     }
     return p_wps_setting;
diff --git a/vendor_specific_tp.c b/vendor_specific_tp.c
index 3d4fdb72d9a7..03d6adcd498a 100644
--- a/vendor_specific_tp.c
+++ b/vendor_specific_tp.c
@@ -65,7 +65,7 @@ void detect_sta_vendor() {
         } else {
             strbuf = temp;
         }
-        strcpy(strbuf + size - 1, buf);
+        strlcpy(strbuf + size - 1, buf, S_BUFFER_LEN);
         size += len;
     }
 
-- 
2.17.1

